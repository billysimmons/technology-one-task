PROJECT OVERVIEW:
Being familiar with this problem, I wanted to figure out a new solution I haven’t seen before online. 
I went with a strategy that divides the number into groups of three digits, processes each group of 3 
separately, determines its size relative to the rest of the number, and then combines the results into 
a full string representation of the number.

The approach involves first breaking the number into chunks of three digits, starting from the right 
(e.g. splitting 123456789 into 123, 456, and 789). Each group of three digits is then processed 
individually, converting them into their corresponding text representation (e.g., 123 becomes "One 
Hundred and Twenty-Three").

Once all groups are processed, the method determines the appropriate scale for each group based on its 
position in the number (thousands, millions, etc.) then combines these parts back together into a single 
string, ensuring proper formatting. 

There are several benefits of my approach over other approaches. Firstly, the logic for dividing numbers 
into groups of three digits is modular, which makes it easy to scale and handle very large numbers. This 
modularity ensures that as numbers grow in size, the solution remains efficient and adaptable without 
requiring a complete overhaul of the code.

Moreover, by using the Model-View-Controller (MVC) design pattern, the code is well-organised and maintainable. 
The separation of concerns provided by MVC makes it easier to test, update, and extend the logic in the 
future. The model handles the core business logic, the controller manages user interactions, and the view 
focuses on presenting the data. This structure leads to a clean and easily navigable codebase.

Additionally, I implemented various unit tests to ensure the accuracy of the number-to-text conversion 
logic. The tests allow me to validate the logic against various test cases, helping to identify edge 
cases and ensuring the solution consistently provides correct results. 


TIME COMPLEXITY:
The time complexity of the Controller is O(d), d representing the number of digits in the input number. 

This is because the main loop processes the digits in groups of three, and each group requires constant 
time operations. After the loop, the reversal and string joining steps also take time proportional to the 
number of groups, which is directly related to the number of digits. Hence, the overall time complexity is 
linear with respect to the number of digits in the input (O(d))

The ConvertHundredOrLess method operates in constant time O(1), as it performs a fixed number of operations. 
Meaning it operated in constant time O(1) and doesn’t affect the overall complexity.
